=== ZfClient

Questa gemma permette di collegarsi all'api di ZapFlow.

== Setup
* Aggiungere come dipendenza al gemfile: gem 'zf_client', :git => 'https://github.com/intersailengineering/zf-client.git', :branch => 'staging'
* Eseguire bundle install(Attenzione devi essere aggiunto agli utenti del repository per scaricarlo)
A questo punto è possibile ottenere il client con il seguente comando:
    c = Intersail::ZfClient::Client::ZClient.new "token"

=== Guida all'uso dello sviluppatore

1. Eseguire sempre le spec con: 'bundle exec rspec'
2. Creare nuove spec quando si implementano nuove features
3. Le spec devono essere tenute allineate con i requisiti dell'applicativo altrimenti
perdono la loro utilità il che renderebbe vano il lavoro fatto fino ad ora e la test di regressione sarebbe inutile
4. Se una spec fallisce c'è qualche problema: controlla il perchè e risolvilo, non commentando la spec!

== File di configurazione ed initializers

Per sovvrascrivere la configurazione creare un file intersail_auth.rb nella cartella config/initializers
Il file deve essere così strutturato:

Intersail::ZfClient.configure do |config|
  # Process instance
  config.process_uri = "/processes"
  config.process_base_uri = "http://wrkdev-jacopo/ZapFlowWsApi"
  # Process def
  config.process_def_uri = "/process_defs"
  config.process_def_base_uri = "http://wrkdev-jacopo/ZapFlowWsApi"
  # Activity def
  config.activity_def_uri = "/activity_defs"
  config.activity_def_base_uri = "http://wrkdev-jacopo/ZapFlowWsApi"
  # User
  config.user_uri = "/users"
  config.user_base_uri = "http://wrkdev-jacopo/ZapFlowWsApi"
  # Unit
  config.unit_uri = "/units"
  config.unit_base_uri = "http://wrkdev-jacopo/ZapFlowWsApi"
  # Role
  config.role_uri = "/roles"
  config.role_base_uri = "http://wrkdev-jacopo/ZapFlowWsApi"
  # Urr
  config.urr_uri = "/urrs"
  config.urr_base_uri = "http://wrkdev-jacopo/ZapFlowWsApi"
  # Acl
  config.acl_uri = "/acls"
  config.acl_base_uri = "http://wrkdev-jacopo/ZapFlowWsApi"
  # General resource as Hash
  config.hash_base_uri = base_uri
end

== Utilizzo

Il suo utilizzo più semplice consiste nel creare un'istanza di ZClient con parametro il Token ti autenticazione.
Successivamente di possono chiamare i metodi per accedere alle risorse così mappati: nomerisorsa_methodo.
Il sistema gestisce anche risorse generiche, basta chiamare risorsa_metodo ed il client accedera all'uri /risorsas chiamando il
metodo fornito; i risultati saranno poi mostrati come hash
